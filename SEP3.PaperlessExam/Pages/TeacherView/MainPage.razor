@page "/teacherMainPage"
@using SEP3.PaperlessExam.Authentication
@using SEP3.PaperlessExam.Data.PaperlessExamSevice.ExamEvent
@using SEP3.PaperlessExam.Model
@using SEP3.PaperlessExam.Model.ExamEvent
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject  IExamService ExamService;
<link rel="stylesheet" type="text/css" href="css/View/view.css">
 @if (_examinationEventsList != null)
 {
     <div class="jumbotron text-center">
         <h1>Upcoming Examination Events</h1>
     </div>
     <table class="table">
         <thead>
         <tr>      
             <th>Exam ID</th>
             <th>Exam Title</th>
             <th>Exam Date and Time(DD/MM/YYYY)</th>
                <th>Exam Duration</th>
         </tr>
         </thead>
         <tbody>

         @foreach (var exam in _examinationEventsList)
         {
             <tr>
                 <td>@exam.Id</td>
                 <td>@exam.ExamTitle</td>
                 <td>@exam.ExamDateAndTime</td>
                 <td>@exam.ExamTimeDuration</td>
             </tr>
         }
         </tbody>
     </table>
 }
 else
 {
     <div style="color:red">@_errorMessage</div>
 }
<div class="container">
    <div class="row">
       
        <div class="col-md-5 red" @onclick="@ToCreateQuestions">
            <img src="images/plus.png" style=" height: 120px;  align-content: center"/>
            <h3><b>Create Questions</b></h3>
        </div>
        <div class="col-md-2"></div>
        <div class="col-md-5 red" @onclick="@ToReviewUpdateQuestions">
            <img src="images/bad-review.png" style="height: 120px; align-content: center"/>
            <h3><b>Review Questions</b></h3>
            <h3><b>Update Questions</b></h3>
        </div>
    </div>
</div>


@code{
    private string _errorMessage;
     private User _currentUser;
    IList<ExaminationEvent> _examinationEventsList;
    
    protected override async Task OnInitializedAsync()
    {
    // UserService.LoginUser(new User());
        _currentUser = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).GetCachedUser();
        try
        {
 _examinationEventsList = await ExamService.GetTeachersUpcomingExamEvents(_currentUser.Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _errorMessage = e.Message;
        }
       
    }
    
    public void ToCreateQuestions()
    {
        NavigationManager.NavigateTo("/createQuestion");
    }

    public void ToReviewUpdateQuestions()
    {
        NavigationManager.NavigateTo("/reviewQuestions");
    }


   
}
