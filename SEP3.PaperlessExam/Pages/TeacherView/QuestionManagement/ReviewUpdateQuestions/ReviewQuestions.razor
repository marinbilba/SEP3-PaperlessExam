@page "/reviewQuestions"
@using SEP3.PaperlessExam.Pages.TeacherView.QuestionManagement.CreateQuestionSet
@using SEP3.PaperlessExam.Data.PaperlessExamSevice
@using SEP3.PaperlessExam.Data.PaperlessExamSevice.QuestionSetsService
@using SEP3.PaperlessExam.Model
@using SEP3.PaperlessExam.Model.Questions
@using SEP3.PaperlessExam.Model.Questions.MultipleChoice
@using SEP3.PaperlessExam.Model.Questions.written
@inject NavigationManager NavigationManager
@inject IQuestionSetsService QuestionSetsService

<link rel="stylesheet" href="css/Shared/sharedStyle.css">
<h3>ReviewQuestion</h3>
<div class="row">
    <div class="col-md-6">

        <select class="form-control" @bind="_questionType" name="need" required="required" data-error="Please filter.">
            <option value="" selected disabled>Select Type Of Exam</option>
            <option>Written</option>
            <option >Multiple choice</option>
        </select>
    </div>
   

    <div class="col-md-2">
        @if (_loadingShow)
        {
            <button type="button" class="btn btn-success btn-md btn-block"@onclick="@(FindQuestionType)">
                Show
                <div id="spinner">
                    <Chase Color="#4a6ac8" Size="20px"/>
                </div>
            </button>
        }
        else
        {
            <button type="button" class="btn btn-success btn-lg btn-block"@onclick="@(FindQuestionType)">
                Show
            </button>
        }
    </div>


</div>


<table class="table">
    <thead>
    <tr>
        <th>Title</th>
        <th>Topic</th>
        <th>Edit</th>
        <th>Delete</th>
    </tr>
    </thead>
    <tbody>
    @if (_writtenSets != null)
    {
        @foreach (var item in _writtenSets)
        {
            <tr>
                <td>@item.Title</td>
                <td>@item.Topic</td>
                <td>
                    <button @onclick="ToEditWrittenQuestion">
                        <i class="oi oi-pencil" style="color:green"/>
                    </button>
                </td>
                <td>
                    @* <button @onclick="ToDeleteWrittenQuestion"> *@
                    @* *@
                    @* </button> *@
                </td>
            </tr>
        }
    }

    else if (_multipleChoiceSets != null)
    {
        @foreach (var item in _multipleChoiceSets)
        {
            <tr>
                <td>@item.Title</td>
                <td>@item.Topic</td>
                <td>
                    <button @onclick="ToEditMultipleChoiceQuestion">
                        <i class="oi oi-pencil" style="color:green"/>
                    </button>
                </td>
            </tr>
        }
    }
    </tbody>
</table>


@code {
    private IList<MultipleChoiceSet> _multipleChoiceSets;
    private IList<WrittenSet> _writtenSets;
    private string _questionType;


    private bool _loadingShow;
    private string _errorMessage;

    private IList<QuestionsSet> _questionsSets;


    private void ToEditWrittenQuestion()
    {
        NavigationManager.NavigateTo($"/UpdateWrittenQuestion/{_writtenSets}");
    }

    private void ToEditMultipleChoiceQuestion()
    {
        NavigationManager.NavigateTo($"/UpdateMultipleChoiceQuestion/{_multipleChoiceSets}");
    }

    private async Task FindQuestionType()
    {
        _loadingShow = true;
        _writtenSets = null;
        _multipleChoiceSets = null;
        _errorMessage = "";
        if (String.IsNullOrEmpty(_questionType))
        {
            _errorMessage = "You must select an option";
            _loadingShow = false;
        }
        switch (_questionType)
        {
            case "Written":
                try
                {
                    _writtenSets = await QuestionSetsService.FindWrittenQuestion(_questionType);
                    if (_writtenSets == null)
                    {
                        _errorMessage = "Nothing was found";
                    }
                    _loadingShow = false;
                }
                catch (Exception e)
                {
                    _loadingShow = false;
                    Console.WriteLine(e);
                    _errorMessage = e.Message;
                }
                break;
            case "Multiple choice":
                try
                {
                    _multipleChoiceSets = await QuestionSetsService.FindMultipleChoiceQuestion(_questionType);
                    _loadingShow = false;
                }
                catch (Exception e)
                {
                    _loadingShow = false;
                    Console.WriteLine(e);
                    _errorMessage = e.Message;
                }
                break;
        }
    }
   
}



}