@page "/reviewQuestions"
@using SEP3.PaperlessExam.Pages.TeacherView.QuestionManagement.CreateQuestionSet
@using SEP3.PaperlessExam.Data.PaperlessExamSevice
@using SEP3.PaperlessExam.Data.PaperlessExamSevice.QuestionSetsService
@using SEP3.PaperlessExam.Model
@using SEP3.PaperlessExam.Model.Questions
@using SEP3.PaperlessExam.Model.Questions.MultipleChoice
@using SEP3.PaperlessExam.Model.Questions.written
@using SEP3.PaperlessExam.Pages.SharedComponents.ConfirmComponent
@using System.Runtime.CompilerServices
@using SEP3.PaperlessExam.Authentication
@using SEP3.PaperlessExam.Data.PaperlessExamSevice.ExamEvent
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IExamService ExamService
@inject IQuestionSetsService QuestionSetsService
@using SEP3.PaperlessExam.Pages.TeacherView.QuestionManagement.CreateQuestionSet
<link rel="stylesheet" type="text/css" href="css/View/view.css">
<link rel="stylesheet" href="css/Shared/sharedStyle.css">
<div class="jumbotron text-center">
    <h1>Review question sets</h1>
</div>
@if (_writtenSetsToShow != null)
{
    <h1>Written Sets</h1>

    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Topic</th>
            <th>Create/Update date</th>
            <th>Delete</th>
            <th>Edit</th>
        </tr>
        </thead>
        <tbody>

        @foreach (var item in _writtenSetsToShow)
        {
            <tr>
                <td>@item.Title</td>
                <td>@item.Topic</td>
                <td>@item.UpdatedTimestamp</td>
                <td>
                    <button @onclick="(() => DeleteWrittenSet(item))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
                <td>
                    <button @onclick="(() => PreviewWrittenSet(item.Id))">
                        <i class="oi oi-pencil" style="color:green"/>
                    </button>
                </td>

            </tr>
        }

        </tbody>
    </table>
}
@if (_multipleChoiceSetsToShow != null)
{
    <h1>Multiple Choice Sets</h1>

    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Topic</th>
            <th>Create/Update date</th>
            <th>Delete</th>
            <th>Preview</th>
        </tr>
        </thead>
        <tbody>

        @foreach (var item in _multipleChoiceSetsToShow)
        {
            <tr>
                <td>@item.Title</td>
                <td>@item.Topic</td>
                <td>@item.UpdatedTimestamp</td>
                <td>
                    <button @onclick="(() => DeleteMultipleChoiceSet(item))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
                <td>
                    <button @onclick="(() => PreviewMultipleChoiceSets(item.Id))">
                        <i class="oi oi-pencil" style="color:green"/>
                    </button>
                </td>

            </tr>
        }

        </tbody>
    </table>
}


<div style="color:red">@_errorMessage</div>


@code
{
    private string _errorMessage;
    // Written sets displayed in UI
    private IList<WrittenSet> _writtenSetsToShow;
    // MultipleChoiceSet displayed in UI
    private IList<MultipleChoiceSet> _multipleChoiceSetsToShow;

    private User _currentUser;

    protected override async Task OnInitializedAsync()
    {
    // UserService.LoginUser(new User());
        _currentUser = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).GetCachedUser();

        try
        {
            _multipleChoiceSetsToShow = await ExamService.GetMultipleChoiceSets(_currentUser);
            if (_multipleChoiceSetsToShow == null)
            {
                _errorMessage = "You haven't created any multiple choice sets";
            }
        }

        catch (Exception e)
        {
            Console.WriteLine(e);
            _errorMessage = e.Message;
        }
        try
        {
            _writtenSetsToShow = await ExamService.GetWrittenSets(_currentUser);
            if (_multipleChoiceSetsToShow == null)
            {
                _errorMessage = "You haven't created any written sets";
            }
        }

        catch (Exception e)
        {
            Console.WriteLine(e);
            _errorMessage = e.Message;
        }
    }


    private async Task DeleteWrittenSet(WrittenSet item)
    {
        try
        {
            await QuestionSetsService.DeleteWrittenSet(item);
            _writtenSetsToShow.Remove(item);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _errorMessage = e.Message;
        }
    }


    private async Task PreviewWrittenSet(long itemId)
    {
        NavigationManager.NavigateTo($"/writtenQuestionWiz/{itemId.ToString()}");
    }

    private async Task DeleteMultipleChoiceSet(MultipleChoiceSet item)
    {
        try
        {
            await QuestionSetsService.DeleteMultipleChoiceSet(item);
            _multipleChoiceSetsToShow.Remove(item);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _errorMessage = e.Message;
        }
    }

    private async Task PreviewMultipleChoiceSets(long itemId)
    {
        throw new NotImplementedException();
    }
}