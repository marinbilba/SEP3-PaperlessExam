@page "/MultipleChoiceQuestions/{MultipleChoiceSetId}"
@page "/asdffads"
@using System.Reflection.Metadata
@using Microsoft.AspNetCore.Razor.TagHelpers
@using SEP3.PaperlessExam.Authentication
@using SEP3.PaperlessExam.Data.PaperlessExamSevice
@using SEP3.PaperlessExam.Data.PaperlessExamSevice.QuestionSetsService
@using SEP3.PaperlessExam.Model
@using SEP3.PaperlessExam.Model.Questions.MultipleChoice
@inject IJSRuntime JsRuntime
@inject IUserService UserService
@inject IQuestionSetsService QuestionSetsService
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3 xmlns="">MultipleChoiceQuestions</h3>

<link rel="stylesheet" type="text/css" href="css/TeacherView/QuestionManagement/CreateQuestionSet/MultipleChoice/multipleChoiceQuestions.css">

<h3>Multiple-choice Questions Builder</h3>

@if (_multipleChoiceSet != null)
{
<EditForm Model="_multipleChoiceSet">

    @for (var _index1 = 0; _index1 < _multipleChoiceSet.MultipleChoiceQuestions.Count; _index1++)
    {
        var multipleChoiceQuestion = _multipleChoiceSet.MultipleChoiceQuestions[_index1];
        _counter = _index1 + 1;
        <div class="container-fluid questionContainer">
            @* Type question  *@
            <div class="row">
                <div class="col-md-1">
                    <div class="questionNumberBox d-flex">
                        <div class="d-flex">
                            <p class="questionNumber">@_counter</p>

                            @* <input style="width: 33px; text-align: right;" type="number" placeholder="@_counter" @bind-value="multipleChoiceQuestion.QuestionNumber"> *@
                        </div>
                    </div>
                </div>
                <div class="col-md-11">
                    <InputText type="text" class="form-control" placeholder="Type your question" @bind-Value="multipleChoiceQuestion.question"></InputText>
                </div>
            </div>
            @* Type number of points *@
            <div class="row top-buffer">
                <div class="col-md-1 offset-1  padding-right0 ">
                    <input type="number" class="form-control" @bind-value="multipleChoiceQuestion.Score" placeholder="Score"/>
                </div>
                <div class="col-md-1 padding-left0">
                    <label>points</label>
                </div>
            </div>


            <div class="row top-buffer justify-content-center">
                <div class="col-md-1 offset-2">
                </div>
                <div class="col-md-7">
                </div>
                <div class="col-md-1"></div>
            </div>


            @for (var i = 0; i < multipleChoiceQuestion.MultipleChoiceQuestionsOption.Count; i++)
            {
                var questionOption = multipleChoiceQuestion.MultipleChoiceQuestionsOption[i];
                Console.WriteLine(i);
                <div class="form-group row top-buffer justify-content-center">
                    <div class="col-md-1 offset-2">
                        <RadzenCheckBox Style="width: 36px;height: 34px" TValue="bool" @bind-Value="@questionOption.CorrectAnswer" Change=@(args => SetCorrectAnswer(args))>
                        </RadzenCheckBox>

                    </div>
                    <div class="col-md-7">
                        <InputText type="text" class="form-control" @bind-Value="@questionOption.Answer" placeholder="Answer"/>
                    </div>
                    <div class="col-md-1">
                        <RadzenButton Icon="delete" style="width: 37px" Click=@(() => multipleChoiceQuestion.RemoveQuestionOption(questionOption))>
                        </RadzenButton>
                    </div>
                </div>
            }

            <div class="row top-buffer justify-content-center">
                <div class="col-md-1 offset-2">
                    <div class="additionalQuestionSelectBox">
                    </div>
                </div>
                <div class="col-md-8">
                    <button id="addButton" type="button" class="additionalQuestionButton"
                            @onclick="@(() => multipleChoiceQuestion.AddQuestionOption(new QuestionOption()))">
                        <span style="color: blue"> Add more</span>
                    </button>
                </div>
            </div>


            @* Add additional option *@

        </div>
        <div class="row top-buffer justify-content-between">
            <div class="col-md-3 offset-9">
                <RadzenButton Disabled="@_disable" style="width: auto; margin-right: 7px" Icon="delete" Click=@(() => _multipleChoiceSet.MultipleChoiceQuestions.Remove(multipleChoiceQuestion))>
                </RadzenButton>
            </div>
        </div>
        multipleChoiceQuestion.QuestionNumber = _counter;
    }


    @* Add new question && Finish buttons *@
    <div class="row top-buffer justify-content-between">
        <div class="col-md-3 offset-9">
            <RadzenButton Icon="" Text="Add question" Click=@(() => done())></RadzenButton>
            <RadzenButton Icon="" style="background-color: #3eb02f;margin-top: 5px" Text="Finish" Click="Finish">
            </RadzenButton>

        </div>

        @* <div class="col-md-3"> *@
        @*    *@
        @* </div> *@
    </div>
</EditForm>
}

@code {
    // If page is launched in edit format
    private bool _updateMode;
    [Parameter] public string MultipleChoiceSetId{get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Topic { get; set; }


    private User _updatedUser;

    private string _roleName;

    private string _score;

    private string _question;

    private int _counter;

    private int _stepper;

    private bool _disable;
    private User _currentUser;

    private MultipleChoiceSet _multipleChoiceSet;


    protected override async Task OnInitializedAsync()
    {
        await LogUsername();
        try
        {
            var user = await UserService.FindByUsername(_currentUser.Username);
            _updatedUser = user;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    //----------------------------------------------------------------- Edit purpose
    // if WrittenSetId == this page has received a parameter for editing
        if (MultipleChoiceSetId != null)
        {
            _updateMode = true;
            var multipleChoiceSetId = long.Parse(MultipleChoiceSetId);

            try
            {
                _multipleChoiceSet = await QuestionSetsService.GetMultipleChoiceSetWithAllChildElements(multipleChoiceSetId);
                _stepper++;
                _disable = true;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
    //------------------------------------------------------------------ Edit End
        else
        {

            _multipleChoiceSet =
                new MultipleChoiceSet(Title, Topic, _updatedUser);

            _multipleChoiceSet.AddQuestion(new MultipleChoiceQuestion());

            _stepper++;
            _disable = true;
        }
    }


    bool _correctAnswerValue;

    int _questionNumber;

    bool? _correctAnswer;

    private void SetCorrectAnswer(bool? value)
    {
        _correctAnswer = value;
    }

    private async Task delete()
    {
        await QuestionSetsService.RemoveMultipleChoiceQuestion(multipleChoiceSetTemp.MultipleChoiceQuestions[^1]);
    }

    private MultipleChoiceSet multipleChoiceSetTemp;

    private async Task LogUsername()
    {
    // await  UserService.LoginUser(new User());
        var user = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).GetCachedUser();

        _currentUser = user;
    }

    private async Task done()
    {
        _multipleChoiceSet.MultipleChoiceQuestions[_counter - 1].QuestionNumber = _counter;
        _disable = false;
        Console.WriteLine(_stepper + "   stepper");


        _disable = false;
        _multipleChoiceSet.AddQuestion(new MultipleChoiceQuestion());


    // Request to add MultipleChoiceQuestion


        _stepper++;
    }

    private async Task Finish()
    {
        if (_updateMode)
        {
            await QuestionSetsService.UpdateMultipleChoiceSet(_multipleChoiceSet);
        }
        else
        {
            try
            {
                await QuestionSetsService.CreateMultipleChoiceSet(_multipleChoiceSet);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
        NavigationManager.NavigateTo("/questionManagement");
    }

}