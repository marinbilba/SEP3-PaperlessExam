@page "/"
@page "/createQuestion"
@using Radzen
@using SEP3.PaperlessExam.Model.Questions.MultipleChoice
@using Microsoft.AspNetCore.Http
@using SEP3.PaperlessExam.Authentication
@using SEP3.PaperlessExam.Data.PaperlessExamSevice
@using SEP3.PaperlessExam.Model
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService


<link rel="stylesheet" type="text/css" href="css/TeacherView/QuestionManagement/CreateQuestionSet/createQuestionMain.css">

<div class="jumbotron text-center">
    <h1>Create Question</h1>
</div>
<RadzenContent Container="main">
    <ChildContent>
        <RadzenSteps NextText="Next" Change="@((args) => StepChange(args))">
            <Steps>
                @* First step *@
                <RadzenStepsItem Disabled="_firstStepDisable" Selected="false" Text="Question type">
                    <ChildContent>
                        <div class="row">
                            <div class="col-md-2">
                                <RadzenLabel Text="*Choose question type:">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-1 offset-9">
                                <RadzenButton Icon="help_outline" Click="@CheckErrorsOnFirstStep">
                                </RadzenButton>
                            </div>
                        </div>

                        <RadzenRadioButtonList @bind-Value=@nullableValue TValue="int?" Orientation="Orientation.Vertical" Change=@((args) => SetQuestionType(args))>
                            <Items>
                                <RadzenRadioButtonListItem Text="Written" Value="1" TValue="int?"/>
                                <RadzenRadioButtonListItem Text="Multiple-choice" Value="2" TValue="int?"/>
                            </Items>
                        </RadzenRadioButtonList>
                        <label style="color: red">@_errorMessage</label>
                    </ChildContent>
                </RadzenStepsItem>
                @* Second step *@
                <RadzenStepsItem Text="Setup" Disabled="_secondStepDisable">
                    <div class="row">
                        <div class="col-md-1 padding-right0">
                            <RadzenLabel Text="Title"/>

                        </div>
                        <div class="col-md-3 padding-left0">
                            <RadzenTextBox style="margin-bottom: 5px;" Change=@(args => SetTitle(args))>
                            </RadzenTextBox>

                        </div>
                        <div class="col-md-1 offset-7">
                            <RadzenButton Icon="help_outline" Click="@CheckErrorsOnSecondStep">
                            </RadzenButton>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-1 padding-right0">
                            <RadzenLabel Text="Topic"/>

                        </div>
                        <div class="col-md-3 padding-left0">
                            <RadzenTextBox style="margin-left: 10px" Change=@(args => SetTopic(args))>
                            </RadzenTextBox>


                        </div>
                    </div>
                    <div style="color:red">@_errorMessage</div>
                </RadzenStepsItem>
                @* Third step *@
                <RadzenStepsItem Text="Create question" Disabled="_thirdStepDisable">
                    @if (_displayWrittenQuestionBuilder)
                    {
                        <WrittenQuestions></WrittenQuestions>
                        
                    }
                    @if (_displayMultipleChoiceQuestionBuilder)
                    {
                        LogUsername();
                        <MultipleChoiceQuestions Username="@username" Title="@_questionSetTitle" Topic="@_questionSetTopic"></MultipleChoiceQuestions>;
                    }
                    else
                    {
                        <label style="color: red">Select </label>
                    }
                </RadzenStepsItem>
            </Steps>
        </RadzenSteps>
    </ChildContent>
</RadzenContent>

@code {
    
    private string _authMessage;
    
    private string username;
    
    private MultipleChoiceSet _multipleChoiceSet;
    
    private async Task LogUsername()
    {
        UserService.LoginUser(new User());
        var authState =((CustomAuthenticationStateProvider) AuthenticationStateProvider).GetCachedUser();
        username = authState.Username;
    }
    
    // After second step send multiplechoiceset with 3 args;
    
    // Question type: Written or Multiple-choice
    private string _questionType;

    private string _errorMessage;    

    private bool _displayMultipleChoiceQuestionBuilder;
    private bool _displayWrittenQuestionBuilder;

    // Used in first step as value for the radio buttons
    int? nullableValue = null;

    private bool _firstStepDisable = true;
    // Controls the access to second step.
    private bool _secondStepDisable = true;
    // Controls the access to third step.
    private bool _thirdStepDisable = true;

    // Second step
    private string _questionSetTopic;
    private string _questionSetTitle;

    private bool _questionSetTopicIsSet;
    private bool _questionSetTitleIsSet;

    void SetQuestionType(int? value)
    {
        _displayWrittenQuestionBuilder = false;
        _displayMultipleChoiceQuestionBuilder = false;
        switch (value)

        {
            case 1:
                _questionType = "Written";
                _displayWrittenQuestionBuilder = true;
                _secondStepDisable = false;
                break;
            case 2:
                _questionType = "Multiple-choice";
                _displayMultipleChoiceQuestionBuilder = true;
                _secondStepDisable = false;
                break;
        }
    }


    private void SetTopic(string value)
    {
        if (value != null)
        {
            _questionSetTopic = value;
            
            _questionSetTopicIsSet = true;
        }
        EvaluateIfThirdStepIsAvailable();
    }

    private void SetTitle(string value)
    {
        if (value != null)
        {
            _questionSetTitle = value;
            _questionSetTitleIsSet = true;
        }
        EvaluateIfThirdStepIsAvailable();
    }

    // Check if user has entered the title and the topic. If the expresion is fulfilled the third step will be open
    private void EvaluateIfThirdStepIsAvailable()
    {
        if (_questionSetTitleIsSet && _questionSetTopicIsSet)
        {
            _thirdStepDisable = false;
        }
    }

    protected async Task StepChange(int args)
    {
        
        switch (args)
        {
            case 0:
                _firstStepDisable = true;
                break;
            case 1:
                _firstStepDisable = true;
                break;
                case 2:
                    _secondStepDisable = true;
                    break;
        }
    }

    private void CheckErrorsOnFirstStep()
    {
    // Check if user has selected the type
        if (_questionType == null)
        {
            _errorMessage = "You must select a question type";
        }
        else if (_questionType != null)
        {
            _errorMessage = String.Empty;
        }
    }

    private void CheckErrorsOnSecondStep()
    {
        if (_questionSetTopic == null)
        {
            _errorMessage = "Enter the topic";
        }
        else if (_questionSetTopic != null)
        {
            _errorMessage = String.Empty;
        }

        if (_questionSetTitle == null)
        {
            _errorMessage = "Enter the title";
        }
        else if (_questionSetTopic != null)
        {
            _errorMessage = String.Empty;
        }
      
    }

}