@page "/writtenQuestionWiz/{writtenSetId}"
@using SEP3.PaperlessExam.Model.Questions.written
@using SEP3.PaperlessExam.Model.Questions.MultipleChoice
@using SEP3.PaperlessExam.Data.PaperlessExamSevice
@using SEP3.PaperlessExam.Data.PaperlessExamSevice.QuestionSetsService
@using SEP3.PaperlessExam.Model
@using SEP3.PaperlessExam.Pages.TeacherView.QuestionManagement.ReviewUpdateQuestions
@using SEP3.PaperlessExam.Authentication
@using SEP3.PaperlessExam.Data.PaperlessExamSevice.UserService

@inject IJSRuntime JsRuntime
@inject IUserService UserService
@inject IQuestionSetsService QuestionSetsService
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>Written Questions Builder</h3>


<link rel="stylesheet" type="text/css" href="css/TeacherView/QuestionManagement/CreateQuestionSet/MultipleChoice/multipleChoiceQuestions.css">

@if (_writtenSet != null)
{
<EditForm Model="_writtenSet">
    @for (var i = 0; i < _writtenSet.WrittenQuestions.Count; i++)
    {
        _counter = i + 1;
        var writtenQuestion = _writtenSet.WrittenQuestions[i];
        <div class="container-fluid questionContainer">
            @* Type question  *@
            <div class="row">
                <div class="col-md-1">
                    <div class="questionNumberBox d-flex justify-content-center">
                        <p class="questionNumber">@_counter</p>
                    </div>
                </div>
                <div class="col-md-11">
                    <input type="text" class="form-control" placeholder="Type your question" @bind-value="writtenQuestion.question"/>
                </div>
            </div>
            @* Type number of points *@
            <div class="row top-buffer">
                <div class="col-md-1 offset-1  padding-right0 ">
                    <input type="number" class="form-control" placeholder="Score" @bind-value="writtenQuestion.Score"/>
                </div>
                <div class="col-md-1 padding-left0">
                    <label>points</label>
                </div>
            </div>
        </div>
        <div class="row top-buffer justify-content-between">
    <div class="col-md-3 offset-9">
        <RadzenButton Disabled="@_disable" style="width: auto; margin-right: 7px" Icon="delete"Click=@(() => _writtenSet.RemoveQuestion(writtenQuestion))></RadzenButton>
    </div>
    </div>
    }
</EditForm>
}
@* Add new question && Finish buttons *@
<div class="row top-buffer justify-content-between">
    <div class="col-md-3 offset-9">
        <RadzenButton Icon="" Click=@(() => done()) Text="Add question"> </RadzenButton>
        <RadzenButton Icon="" style="background-color: #3eb02f;margin-top: 5px" Text="Finish" Click="Finish">
        </RadzenButton>
    </div>
    @* <div class="col-md-3"> *@
    @*    *@
    @* </div> *@
</div>


@code {
    // If page is launched in edit format
    private bool _updateMode;
    private WrittenSet _writtenSet;

    private User _currentUser;
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Topic { get; set; }

    private int _counter;

    private User _updatedUser;

    private int _stepper;

    private bool _disable;
    int _questionNumber;

    // For edit view
    [Parameter]
    public string WrittenSetId { get; set; }

    protected override async Task OnInitializedAsync()
    {
       await LogUsername();
        var user = await UserService.FindByUsername(_currentUser.Username);
        _updatedUser = user;
        
    //----------------------------------------------------------------- Edit purpose
    // if WrittenSetId == this page has received a parameter for editing
        if (WrittenSetId != null)
        {
            _updateMode = true;
            var writtenId = long.Parse(WrittenSetId);

            Console.WriteLine(WrittenSetId);

            try
            {
                _writtenSet = await QuestionSetsService.GetWrittenSetWithAllChildElements(writtenId);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
    //------------------------------------------------------------------ Edit End
        else
        {
            _writtenSet =
                new WrittenSet(Title, Topic, _updatedUser);
            _writtenSet.AddQuestion(new WrittenQuestion());

            _stepper++;
            _disable = true;
        }
    }

    private async Task LogUsername()
    {
    // await  UserService.LoginUser(new User());
        var user =((CustomAuthenticationStateProvider) AuthenticationStateProvider).GetCachedUser();
        
        _currentUser = user;
    }

    private async Task done()
    {
        _writtenSet.WrittenQuestions[_counter - 1].QuestionNumber = _counter;
        _disable = false;
        Console.WriteLine(_stepper + "   stepper");

        _writtenSet.AddQuestion(new WrittenQuestion());
    }

    private async Task Finish()
    {
        if (_updateMode)
        {
            await QuestionSetsService.UpdateWrittenSet(_writtenSet);
        }
        else
        {
            try
            {
                await QuestionSetsService.CreateWrittenSet(_writtenSet);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
        NavigationManager.NavigateTo("/questionManagement");
    }

}