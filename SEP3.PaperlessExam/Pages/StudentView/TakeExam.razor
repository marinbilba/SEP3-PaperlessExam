@page "/takeExam/{examId}"
@inject IExamService ExamService

@using SEP3.PaperlessExam.Data.PaperlessExamSevice.ExamEvent
@using SEP3.PaperlessExam.Model.ExamEvent
@using SEP3.PaperlessExam.Model.Questions.written

<link rel="stylesheet" type="text/css" href="css/TeacherView/QuestionManagement/CreateQuestionSet/MultipleChoice/multipleChoiceQuestions.css">
@if (examinationEvent != null)
{
    <h2>@examinationEvent.ExamTitle</h2>
    <h3>Good Luck</h3>
@if (_writtenSets != null)
{
    foreach (var _writtenSet in _writtenSets)
    {
<EditForm Model="_writtenSet">
    @for (var i = 0; i < _writtenSet.WrittenQuestions.Count; i++)
    {
        _counter = i + 1;
        var writtenQuestion = _writtenSet.WrittenQuestions[i];
        <div class="container-fluid questionContainer">
            @* Type question  *@
            <div class="row">
                <div class="col-md-1">
                    <div class="questionNumberBox d-flex justify-content-center">
                        <p class="questionNumber">@_counter</p>
                    </div>
                </div>
                <div class="col-md-11">
                    <input type="text" class="form-control" placeholder="Type your question" @bind-value="writtenQuestion.question"readonly/>
                </div>
            </div>
            @* Type number of points *@
            <div class="row top-buffer">
                <div class="col-md-1 offset-1  padding-right0 ">
                    <input type="number" class="form-control" placeholder="Score" @bind-value="writtenQuestion.Score" readonly/>
                </div>
                <div class="col-md-1 padding-left0">
                    <label>points</label>
                </div>
            </div>
            <div class="row top-buffer">
                <div class="col-md-12   ">
                    <RadzenTextArea @bind-Value=@writtenQuestion.questionAnswer Cols="150" Rows="5"/>
                </div>
            </div>
        </div>
    }
</EditForm>
    }
}
@* Add new question && Finish buttons *@
    <div class="row top-buffer justify-content-between">
        <div class="col-md-3 offset-9">
            <RadzenButton Icon="" style="background-color: #3eb02f;margin-top: 5px" Text="Finish" Click="Finish">
            </RadzenButton>
        </div>
        @* <div class="col-md-3"> *@
        @*    *@
        @* </div> *@
    </div>
}

@code {

    [Parameter]
    public string ExamId { get; set; }

    private ExaminationEvent examinationEvent;
    private IList<WrittenSet> _writtenSets;
    private int _counter;

    protected override async Task OnInitializedAsync()
    {
        if (ExamId != null)
        {
            try
            {
                examinationEvent = await ExamService.GetExaminationPaper(ExamId);
                DisplayExamWrittenSets(examinationEvent.WrittenSets);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }

    private void DisplayExamWrittenSets(IList<WrittenSet> examinationEventWrittenSets)
    {
        if (examinationEventWrittenSets != null)
        {
            _writtenSets = examinationEventWrittenSets;
        }
    }


    private void Finish()
    {

        Console.WriteLine("finish");
    }

}