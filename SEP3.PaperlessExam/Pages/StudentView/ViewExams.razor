@* @page "/ViewExams" *@
@using SEP3.PaperlessExam.Model.ExamEvent
@using SEP3.PaperlessExam.Authentication
@using SEP3.PaperlessExam.Data.PaperlessExamSevice.ExamEvent
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IExamService ExamService
@inject NavigationManager NavigationManager


@if (_examinationEventsToShow == null)
{
    <p>No exams to show</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Date</th>
            <th>Take exam</th>
        </tr>
        </thead>

        <tbody>
        @foreach (var item in _examinationEventsToShow)
        {
            <tr>
                <td>@item.ExamTitle</td>
                <td>@item.ExamDateAndTime</td>
                <td>
                    <button type="button" class="btn btn-primary" >
                        Take exam
                    </button>
                </td>
            </tr>
        }
        </tbody>


    </table>
}
@code {
    private IList<ExaminationEvent> _examinationEventsToShow;
    private string _errorMessage;
    string _username;

    protected override async Task OnInitializedAsync()
    {
        LogUsername();
    }

    private async Task GetExams()
    {
        _errorMessage = "";
        try
        {
            _examinationEventsToShow = await ExamService.GetExaminationEvents(_username);
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            Console.WriteLine(e);
        }
    }

    private async Task LogUsername()
    {
        var user =((CustomAuthenticationStateProvider) AuthenticationStateProvider).GetCachedUser();
        _username = user.Username;
    }

    private void TakeExam(ExaminationEvent examEvent)
    {
        NavigationManager.NavigateTo($"/TakeExam/{examEvent}");
    }
    
}