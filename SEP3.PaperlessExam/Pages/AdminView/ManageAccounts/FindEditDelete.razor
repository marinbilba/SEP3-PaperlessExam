@page "/FindEditDelete"
@using SEP3.PaperlessExam.Model
@using SEP3.PaperlessExam.Data.PaperlessExamSevice
@using SEP3.PaperlessExam.Pages.SharedComponents.ConfirmComponent

@using System.Text
@using BlazorComponentUtilities
@using Microsoft.AspNetCore.Http.Features
@using Blazored.Typeahead
@inject IUserService UserService
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/Shared/sharedStyle.css">
<div class="row">
    <div class="col-md-4">
        @* <p> *@
        <input type="text" placeholder="Type first first name" @bind-value="_searchedFirstName"/>
    </div>

    @if (_loadingShow)
    {
        <div class="col-md-2">
            <button class="btn btn-success" @onclick="@(SearchByFirstNameOrUsername)">
                <div id="spinner">
                    <Chase Color="#4a6ac8" Size="20px"/>
                </div>
                Search
            </button>
        </div>
    }
    else
    {
        <div class="col-md-2">
            <button class="btn btn-success btn-lg" @onclick="@(SearchByFirstNameOrUsername)">
                Search
            </button>
        </div>
    }
</div>
<div class="row">
    <div class="col-md-4">
        @* <p> *@
        <input type="text" placeholder="Type username" @bind-value="_searchedUsername"/>
    </div>
</div>
<div class="row">
    <div class="col-md">
        <div style="color:red;padding:5px">@_errorMessage</div>
    </div>
</div>
<br/>


else
{
    <table class="table">
        <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Username</th>
            <th>Password</th>
            <th>Role</th>
            <th>Email</th>
            <th>Delete</th>
            <th>Edit</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in _allUsers)
        {
            <tr>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.Username</td>
                <td>@item.Password</td>
                <td>@item.Role.Name</td>
                <td>@item.Email</td>
                <td>
                    <button @onclick="@(() => DeleteUser(item))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
                <td>
                    <button @onclick="@(() => ToEditUser(item))">
                        <i class="oi oi-pencil" style="color:green"/>
                    </button>
                </td>
            </tr>
        }

        </tbody>
    </table>
    <Confirm ConfirmationChanged="ConfirmDelete" @ref="DeleteConfirmation"
             ConfirmationTitle="Delete Confirmation" ConfirmationMessage=@($"Are you sure you want to delete user: {_userToDelete.Username} ?")>

    </Confirm>
}

@code {

    private bool _loadingShow;
    private string _errorMessage;

    private User _userToDelete = new User();
    private IList<User> _allUsers = new List<User>();


    private string _searchedFirstName;
    private string _searchedUsername;

    // private IList<User> _usersToShow = new List<User>();
    private User _selectedUser;


    protected ConfirmBase DeleteConfirmation { get; set; }

    private async Task SearchByFirstNameOrUsername()
    {
        _errorMessage = String.Empty;
        _loadingShow = true;
        if (String.IsNullOrEmpty(_searchedUsername) && String.IsNullOrEmpty(_searchedFirstName))
        {
            _errorMessage = "You must enter the username or first name";
            _loadingShow = false;
            
        }else if (!String.IsNullOrEmpty(_searchedUsername) && !String.IsNullOrEmpty(_searchedFirstName))
        {
            _errorMessage = "Only one search criteria is allowed";
            _loadingShow = false;
        }
        else if (!String.IsNullOrEmpty(_searchedFirstName))
        {
            try
            {

                _allUsers = await UserService.FindByFirstName(_searchedFirstName);
                _loadingShow = false;

            }
            catch (Exception e)
            {
                _loadingShow = false;
                Console.WriteLine(e);
                _errorMessage = e.Message;
            }
        }else if (!String.IsNullOrEmpty(_searchedUsername))
        {
            try
            {
                User tempUser = await UserService.FindByUsername(_searchedUsername);
                _allUsers.Add(tempUser);
                _loadingShow = false;
            }
            catch (Exception e)
            {
                _loadingShow = false;
                Console.WriteLine(e);
                _errorMessage = e.Message;
            }
        }
    }

    private void ToEditUser(User user)
    {
        NavigationManager.NavigateTo($"/UpdateUser/{user.Username}");
    }


    private async Task DeleteUser(User user)
    {
        _userToDelete = user;
        DeleteConfirmation.Show();
        _errorMessage = "";
    }

    protected async Task ConfirmDelete(bool deleteConfirm)
    {
        if (deleteConfirm)
        {
            _errorMessage = "";
            try
            {
                await UserService.DeleteUser(_userToDelete);
                _allUsers.Remove(_userToDelete);
            }
            catch (Exception e)
            {
                _errorMessage = e.Message;
                Console.WriteLine(e);
            }
        }
    }

}